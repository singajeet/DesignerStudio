<AddIn name="DesignerStudio"
		author="Ajeet Singh"
		copyright=""
		url="http://www.icsharpcode.net"
		description="DesignerStudio main addin">

	<Manifest>
		<Identity name = "DesignerStudio" />
	</Manifest>
	<Runtime>
		<Import assembly="ICSharpCode.SharpDevelop.dll" >	
			<ConditionEvaluator name="ActiveContentExtension" class="ICSharpCode.SharpDevelop.ActiveContentExtensionConditionEvaluator"/>
			<ConditionEvaluator name="ActiveViewContentUntitled" class="ICSharpCode.SharpDevelop.ActiveViewContentUntitledConditionEvaluator"/>
			<ConditionEvaluator name="ActiveWindowState" class="ICSharpCode.SharpDevelop.ActiveWindowStateConditionEvaluator"/>
			<ConditionEvaluator name="SolutionOpen" class="ICSharpCode.SharpDevelop.SolutionOpenConditionEvaluator"/>
			<ConditionEvaluator name="DebuggerSupports" class="ICSharpCode.SharpDevelop.Debugging.DebuggerSupportsConditionEvaluator"/>
			<ConditionEvaluator name="IsProcessRunning" class="ICSharpCode.SharpDevelop.Debugging.IsProcessRunningConditionEvaluator"/>
			<ConditionEvaluator name="OpenWindowState" class="ICSharpCode.SharpDevelop.OpenWindowStateConditionEvaluator"/>
			<ConditionEvaluator name="WindowActive" class="ICSharpCode.SharpDevelop.WindowActiveConditionEvaluator"/>
			<ConditionEvaluator name="WindowOpen" class="ICSharpCode.SharpDevelop.WindowOpenConditionEvaluator"/>
			<ConditionEvaluator name="WriteableProject" class="ICSharpCode.SharpDevelop.WriteableProjectConditionEvaluator"/>
			<ConditionEvaluator name="WriteableSolution" class="ICSharpCode.SharpDevelop.WriteableSolutionConditionEvaluator"/>
			<ConditionEvaluator name="ProjectActive" class="ICSharpCode.SharpDevelop.ProjectActiveConditionEvaluator"/>
			<ConditionEvaluator name="TextContent" class="ICSharpCode.SharpDevelop.Editor.TextContentConditionEvaluator"/>
			<ConditionEvaluator name="BrowserLocation" class="ICSharpCode.SharpDevelop.BrowserDisplayBinding.BrowserLocationConditionEvaluator"/>
			<ConditionEvaluator name="RefactoringProviderSupports" class="ICSharpCode.SharpDevelop.Refactoring.RefactoringProviderSupportsConditionEvaluator"/>
			<ConditionEvaluator name="CanNavigateBack" class="ICSharpCode.SharpDevelop.CanNavigateBackConditionEvaluator"/>
			<ConditionEvaluator name="CanNavigateForward" class="ICSharpCode.SharpDevelop.CanNavigateForwardConditionEvaluator"/>
			<ConditionEvaluator name="CompareProjectProperty" class="ICSharpCode.SharpDevelop.CompareProjectPropertyConditionEvaluator"/>
			<ConditionEvaluator name="ProjectItem" class="ICSharpCode.SharpDevelop.Project.ProjectItemConditionEvaluator"/>
			<ConditionEvaluator name="IsTextSelected" class="ICSharpCode.SharpDevelop.Editor.TextSelectedCondition"/>
			<ConditionEvaluator name="ViewInBrowser" class="ICSharpCode.SharpDevelop.ViewInBrowserConditionEvaluator"/>
			<ConditionEvaluator name="ProjectBehaviorSupported" class="ICSharpCode.SharpDevelop.Project.ProjectBehaviorSupportedConditionEvaluator"/>
			<ConditionEvaluator name="SymbolTypeAtCaret" class="ICSharpCode.SharpDevelop.Internal.ConditionEvaluators.SymbolTypeAtCaretConditionEvaluator"/>
			<ConditionEvaluator name="IsAssemblyUnpinned" class="ICSharpCode.SharpDevelop.Dom.ClassBrowser.IsAssemblyUnpinnedConditionEvaluator"/>
			
			
			<Doozer name="CustomTool" class="ICSharpCode.SharpDevelop.Project.CustomToolDoozer"/>
			<Doozer name="CustomProperty" class="ICSharpCode.SharpDevelop.Project.CustomPropertyDoozer"/>
			<Doozer name="OptionPanel" class="ICSharpCode.SharpDevelop.OptionPanelDoozer"/>
			<Doozer name="DisplayBinding" class="ICSharpCode.SharpDevelop.Workbench.DisplayBindingDoozer"/>
			<Doozer name="Pad" class="ICSharpCode.SharpDevelop.PadDoozer"/>
			<Doozer name="ProjectBinding" class="ICSharpCode.SharpDevelop.Project.ProjectBindingDoozer"/>
			<Doozer name="LanguageBinding" class="ICSharpCode.SharpDevelop.LanguageBindingDoozer"/>
			<Doozer name="TextEditorExtension" class="ICSharpCode.SharpDevelop.Editor.TextEditorExtensionDoozer"/>
			<Doozer name="BrowserSchemeExtension" class="ICSharpCode.SharpDevelop.BrowserDisplayBinding.SchemeExtensionDoozer"/>
			<Doozer name="CodeCompletionBinding" class="ICSharpCode.SharpDevelop.Editor.CodeCompletion.CodeCompletionBindingDoozer"/>
			<Doozer name="Directory" class="ICSharpCode.SharpDevelop.DirectoryDoozer"/>
			<Doozer name="TaskBoundAdditionalLogger" class="ICSharpCode.SharpDevelop.Project.TaskBoundAdditionalLoggerDoozer"/>
			<Doozer name="TaskBoundLoggerFilter" class="ICSharpCode.SharpDevelop.Project.TaskBoundLoggerFilterDoozer"/>
			<Doozer name="TemplateFile" class="ICSharpCode.SharpDevelop.Templates.TemplateFileDoozer"/>
			<Doozer name="TemplateCategory" class="ICSharpCode.SharpDevelop.Templates.TemplateCategoryDoozer"/>				
		</Import>
<!--		<Import assembly="ICSharpCode.Build.Tasks.dll" />-->
		<Import assembly="ICSharpCode.Core.dll">
			<Doozer name="Parser" class="ICSharpCode.SharpDevelop.Parser.ParserDoozer"/>
		</Import>
		<!--<Import assembly="ICSharpCode.Core.Presentation.dll" />
		<Import assembly="ICSharpCode.SharpDevelop.Widgets.dll" />
		<Import assembly="ICSharpCode.TreeView.dll" />-->
		<Import assembly="DesignerStudio.Test.dll" />
	</Runtime>
	<Path name="/SharpDevelop/Services">					
		<Service id="ICSharpCode.SharpDevelop.Parser.IGlobalAssemblyCacheService"
		         class="ICSharpCode.SharpDevelop.Parser.GlobalAssemblyCacheService"/>
		<Service id="ICSharpCode.SharpDevelop.Parser.IParserService"
		         class="ICSharpCode.SharpDevelop.Parser.ParserService"/>
		<Service id="ICSharpCode.SharpDevelop.Parser.IAssemblyParserService"
		         class="ICSharpCode.SharpDevelop.Parser.AssemblyParserService"/>
		<Service id="ICSharpCode.SharpDevelop.Workbench.IFileService"
		         class="ICSharpCode.SharpDevelop.Workbench.FileService"/>
		<Service id="ICSharpCode.SharpDevelop.Workbench.IShutdownService"
		         class="ICSharpCode.SharpDevelop.Workbench.ShutdownService"/>
		<Service id="ICSharpCode.SharpDevelop.Workbench.IDisplayBindingService"
		         class="ICSharpCode.SharpDevelop.Workbench.DisplayBindingService"/>
		<Service id="ICSharpCode.SharpDevelop.Dom.ITreeNodeFactory"
		         class="ICSharpCode.SharpDevelop.Dom.TreeNodeFactoryService"/>
		<Service id="ICSharpCode.SharpDevelop.Dom.IModelFactory"
		         class="ICSharpCode.SharpDevelop.Dom.ModelFactory"/>
		<Service id="ICSharpCode.SharpDevelop.IClipboard"
		         class="ICSharpCode.SharpDevelop.ClipboardWrapper"/>
		<Service id="ICSharpCode.SharpDevelop.IFileSystem"
		         class="ICSharpCode.SharpDevelop.FileSystem"/>
		<Service id="ICSharpCode.SharpDevelop.Templates.ITemplateService"
		         class="ICSharpCode.SharpDevelop.Templates.TemplateService"/>
		<Service id="ICSharpCode.SharpDevelop.Project.IBuildService"
		         class="ICSharpCode.SharpDevelop.Project.BuildService"/>
		<Service id="ICSharpCode.SharpDevelop.Project.IProjectService"
		         class="ICSharpCode.SharpDevelop.Project.SDProjectService"/>
		<Service id="ICSharpCode.SharpDevelop.ILanguageService"
		         class="ICSharpCode.SharpDevelop.SDLanguageService"/>
		<Service id="ICSharpCode.SharpDevelop.Project.IMSBuildEngine"
		         class="ICSharpCode.SharpDevelop.Project.MSBuildEngine"/>
		<Service id="ICSharpCode.SharpDevelop.Editor.Bookmarks.IBookmarkManager"
		         class="ICSharpCode.SharpDevelop.Editor.Bookmarks.BookmarkManager"/>
		<Service id="ICSharpCode.SharpDevelop.IUIService"
		         class="ICSharpCode.SharpDevelop.UIService"/>
		<Service id="ICSharpCode.SharpDevelop.Dom.ClassBrowser.IClassBrowser"
		         class="ICSharpCode.SharpDevelop.Dom.ClassBrowser.ClassBrowserServiceImpl"/>
		<Service id="ICSharpCode.SharpDevelop.WinForms.IWinFormsService"
		         class="ICSharpCode.SharpDevelop.WinForms.WinFormsService"/>
		<Service id="ICSharpCode.SharpDevelop.WinForms.IWinFormsMenuService"
		         class="ICSharpCode.SharpDevelop.WinForms.WinFormsMenuService"/>
		<Service id="ICSharpCode.SharpDevelop.WinForms.IWinFormsToolbarService"
		         class="ICSharpCode.SharpDevelop.WinForms.WinFormsToolbarService"/>
	</Path>	
	
	<Path name = "/SharpDevelop/Workbench/Ambiences">
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/DisplayBindings">
		<DisplayBinding id    = "Browser"
		                title = "${res:Gui.ProjectBrowser.OpenWith.Bindings.WebBrowser}"
		                class = "ICSharpCode.SharpDevelop.BrowserDisplayBinding.BrowserDisplayBinding"/>
		<DisplayBinding id    = "AutoDetect"
		                title = "Auto-detect file type"
		                class = "ICSharpCode.SharpDevelop.Workbench.AutoDetectDisplayBinding"/>
		<DisplayBinding id    = "ShellExecute"
		                title = "${res:Gui.ProjectBrowser.OpenWith.Bindings.DefaultWindowsApplication}"
		                class = "ICSharpCode.SharpDevelop.Workbench.ShellExecuteDisplayBinding" />
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/FileFilter">
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Combine/FileFilter">
		<FileFilter id         = "Solution"
		            name       = "${res:SharpDevelop.FileFilter.SolutionFiles}"
		            extensions = "*.sln"/>
		
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Pads">
		<Pad id="AddInTreeDetails"
			category="Main"
			title="AddInTreeDetails"
			class="CustomPad.AddInTreeDetails"
			defaultPosition="Right"/>
		
		<Pad id       = "ProjectBrowser"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ProjectScoutLabel}"		     
			 packIconKey = "PackIconMaterial;FileTree"		     
			 class    = "ICSharpCode.SharpDevelop.Project.ProjectBrowserPad"		     
		     defaultPosition = "Left" />
	
		<Pad id="ClassBrowser"
			category="Main"
			title="${res:MainWindow.Windows.ClassScoutLabel}"
		    class="ICSharpCode.SharpDevelop.Dom.ClassBrowser.ClassBrowserPad"		    
		    packIconKey = "PackIconMaterial;Matrix"
			defaultPosition="Left"/>
	
		<Pad id       = "SideBar"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ToolbarLabel}"
		     icon     = "PadIcons.Toolbar"
		     class    = "ICSharpCode.SharpDevelop.Gui.ToolsPad"
		     defaultPosition = "Left" />
	
		<Pad id       = "OutlinePad"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.OutlinePad}"
		     icon     = "PadIcons.Toolbar"
		     class    = "ICSharpCode.SharpDevelop.Gui.OutlinePad"
		     defaultPosition = "Left, Hidden" />
	
		<Pad id       = "ErrorList"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.ErrorList}"
		     icon     = "PadIcons.ErrorList"
		     class    = "ICSharpCode.SharpDevelop.Gui.ErrorListPad"
		     defaultPosition = "Bottom" />
	
		<Pad id       = "TaskList"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.TaskList}"
		     icon     = "PadIcons.TaskList"
		     class    = "ICSharpCode.SharpDevelop.Gui.TaskListPad"
		     defaultPosition = "Bottom" />
		
		<Pad id       = "OutputPad"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.OutputWindow}"
		     icon     = "PadIcons.Output"
		     class    = "ICSharpCode.SharpDevelop.Gui.CompilerMessageView"
		     defaultPosition = "Bottom" />
	
		<Pad id       = "PropertyPad"
		     category = "Main"
		     title    = "${res:MainWindow.Windows.PropertiesScoutLabel}"
		     icon     = "Icons.16x16.PropertiesIcon"
		     shortcut = "F4"
		     class    = "ICSharpCode.SharpDevelop.Gui.PropertyPad"
		     defaultPosition = "Right" />
	</Path>
	
	<!-- Workbench standard main menu -->
	<Path name="/SharpDevelop/Workbench/MainMenu">
		<MenuItem id="File"
					type="Menu"
					label="${res:XML.MainMenu.FileMenu}">
			<MenuItem id="New"
			          	type="Menu"
						label="${res:XML.MainMenu.FileMenu.New}">
				<MenuItem id="File"
							label="${res:XML.MainMenu.FileMenu.New.File}"
				          	class = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"
							packIconKey="PackIconMaterial;File"
							shortcut="Control|N" />
				<Condition name="SolutionOpen" action="Disable">
					<MenuItem id          = "Project"
					          label       = "${res:XML.MainMenu.FileMenu.New.Project}"
					          icon        = "Icons.16x16.NewProjectIcon"
					          class       = "ICSharpCode.SharpDevelop.Project.Commands.AddNewProjectToSolution"/>
				</Condition>
				<MenuItem id="Solution"
							label="${res:XML.MainMenu.FileMenu.New.Solution}"
							packIconKey="PackIconMaterial;FileMultiple"
							class = "ICSharpCode.SharpDevelop.Project.Commands.CreateNewSolution"	
							shortcut="Control|Shift|N"/>
			</MenuItem>
			<MenuItem id = "Open" label = "${res:XML.MainMenu.FileMenu.Open}" type="Menu">
				<MenuItem id          = "File"
				          label       = "${res:XML.MainMenu.FileMenu.Open.File}"
				          icon        = "Icons.16x16.OpenFileIcon"
				          shortcut    = "Control|O"
				          class       = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>
				
				<MenuItem id          = "OpenWith"
				          label       = "${res:Gui.ProjectBrowser.OpenWith}"
				          class       = "ICSharpCode.SharpDevelop.Commands.OpenFileWith"/>
				
				<MenuItem id = "Project"
				          label = "${res:XML.MainMenu.FileMenu.Open.Project}"
				          icon = "Icons.16x16.OpenProjectIcon"
				          shortcut = "Control|Shift|O"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.LoadSolution"/>
			</MenuItem>
			<MenuItem id = "Close" label = "${res:XML.MainMenu.FileMenu.Close}" type="Menu">
				<Condition name = "WindowActive" activewindow="*" action="Disable">
					<MenuItem id = "CloseFile"
					          label = "${res:XML.MainMenu.FileMenu.Close.File}"
					          icon  = "Icons.16x16.CloseFileIcon"
					          shortcut = "Control|F4"
					          class ="ICSharpCode.SharpDevelop.Commands.CloseFile"/>
				</Condition>
				<Condition name = "SolutionOpen" action="Disable">
					<MenuItem id = "CloseCombine"
					          label = "${res:XML.MainMenu.FileMenu.Close.Project}"
					          shortcut = "Control|Shift|F4"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.CloseSolution"/>
				</Condition>
			</MenuItem>
			<MenuItem id = "ReloadSeparator" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="*" action="Disable">
				<MenuItem id = "Reloadfile"
				          label = "${res:XML.MainMenu.FileMenu.Reload}"
				          shortcut = "Shift|Control|U"
				          class = "ICSharpCode.SharpDevelop.Commands.ReloadFile" />
			</Condition>
			<MenuItem id = "SaveSeparator" type = "Separator"  />
			<MenuItem id="Save"
						label="${res:XML.MainMenu.FileMenu.Save}"
						packIconKey="PackIconMaterial;ContentSave"
			          	class   = "ICSharpCode.SharpDevelop.Commands.SaveFile"
						shortcut="Control|S" />
			<Condition name = "ActiveWindowState" windowstate="None" nowindowstate="ViewOnly" action="Disable">
				<MenuItem id = "SaveAs"
				          label = "${res:XML.MainMenu.FileMenu.SaveAs}"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveFileAs"/>
			</Condition>
			<MenuItem id="SaveAll"
						label="${res:XML.MainMenu.FileMenu.SaveAll}"
						packIconKey="PackIconMaterial;ContentSaveAll"
			          	class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"
						shortcut="Control|Shift|S" />
			<MenuItem id = "PrintSeparator" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="*" action="Disable">
				<MenuItem id = "Print"
				          label = "${res:XML.MainMenu.FileMenu.Print}"
				          icon = "Icons.16x16.Print"
				          shortcut = "Control|P"
				          command = "Print"/>
				<MenuItem id = "PrintPreview"
				          label = "${res:XML.MainMenu.FileMenu.PrintPreview}"
				          icon = "Icons.16x16.PreView"
				          command = "PrintPreview"/>
			</Condition>
			<MenuItem id = "RecentSeparator" type = "Separator"  />
			<MenuItem id = "RecentFiles"    attribute = "RecentFiles" label = "${res:XML.MainMenu.FileMenu.RecentFiles}" type="Menu">
				<MenuItem id = "RecentFilesBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Commands.RecentFilesMenuBuilder" />
				<MenuItem id = "RecentFilesSeparator" type = "Separator"  />
				<MenuItem id = "ClearRecentFiles"
				          label = "${res:XML.MainMenu.FileMenu.ClearRecentFiles}"
				          class = "ICSharpCode.SharpDevelop.Commands.ClearRecentFiles" />
			</MenuItem>
			
			<MenuItem id = "RecentProjects" attribute = "RecentProjects" label = "${res:XML.MainMenu.FileMenu.RecentProjects}" type="Menu">
				<MenuItem id = "RecentProjectsBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Commands.RecentProjectsMenuBuilder" />
				<MenuItem id = "RecentProjectsSeparator" type = "Separator"  />
				<MenuItem id = "ClearRecentFiles"
				          label = "${res:XML.MainMenu.FileMenu.ClearRecentProjects}"
				          class = "ICSharpCode.SharpDevelop.Commands.ClearRecentProjects" />
			</MenuItem>
			<MenuItem id = "ExitSeparator" type = "Separator"  />
			<MenuItem id="Exit"
						label="${res:XML.MainMenu.FileMenu.Exit}"
						packIconKey="PackIconMaterial;ExitToApp"
						class = "ICSharpCode.SharpDevelop.Commands.ExitWorkbenchCommand"/>
		</MenuItem><!-- END File menu -->
		
		
		<MenuItem id="Edit"
					type="Menu"
					label="Edit">
			<MenuItem id = "Undo"
			          label = "${res:XML.MainMenu.EditMenu.Undo}"
			          icon = "Icons.16x16.UndoIcon"
			          type = "Item"
			          command = "Undo"/>
			<MenuItem id = "Redo"
			          label = "${res:XML.MainMenu.EditMenu.Redo}"
			          icon = "Icons.16x16.RedoIcon"
			          type = "Item"
			          command = "Redo"/>
			<MenuItem id = "Separator1" type = "Separator"  />
			<MenuItem id="Cut"
					label="${res:XML.MainMenu.EditMenu.Cut}"
					packIconKey="PackIconMaterial;ContentCut"
					shortcut="Control|X"
					class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
			<MenuItem id="Copy"
					label="${res:XML.MainMenu.EditMenu.Copy}"
					packIconKey="PackIconMaterial;ContentCopy"
					shortcut="Control|C"
					class = "ICSharpCode.SharpDevelop.Project.Commands.CopyProjectBrowserNode"/>
			<MenuItem id="Paste"
					label="${res:XML.MainMenu.EditMenu.Paste}"
					packIconKey="PackIconMaterial;ContentPaste"
					shortcut="Control|V"
					class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          icon = "Icons.16x16.DeleteIcon"
			          type = "Item"
			          command = "Delete"/>
			<MenuItem id = "Separator2" type = "Separator"  />
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.Editor.ITextEditor" action="Disable">
				<MenuItem id = "Insert" label = "${res:XML.MainMenu.EditMenu.Insert}" type="Menu">
					<MenuItem id = "PasteAsComment"
					          label = "${res:XML.MainMenu.EditMenu.Paste.AsComment}"
					          class="ICSharpCode.SharpDevelop.Editor.Commands.PasteAsCommentCommand"/>
					<MenuItem id = "PasteAsString"
					          label = "${res:XML.MainMenu.EditMenu.Paste.AsString}"
					          class="ICSharpCode.SharpDevelop.Editor.Commands.PasteAsStringCommand"/>
					
					<MenuItem id="Separator1" type="Separator"/>
					
					<MenuItem id = "InsertColor"
					          label = "${res:XML.MainMenu.ToolMenu.InsColor}"
					          class = "ICSharpCode.SharpDevelop.Editor.Commands.ShowColorDialog"/>
					<MenuItem id       = "InsertGuid"
					          shortcut = "Control|Shift|G"
					          label    = "${res:XML.MainMenu.ToolMenu.InsGUID}"
					          class    = "ICSharpCode.SharpDevelop.Editor.Commands.InsertGuidCommand"/>
				</MenuItem>
			</Condition>
			<MenuItem id    = "Separator3" type = "Separator" />
			<MenuItem id = "SelectAll"
			          label = "${res:XML.MainMenu.EditMenu.SelectAll}"
			          packIconKey="PackIconMaterial;SelectAll"
			          command = "SelectAll"/>
			<ComplexCondition action="Disable">
				<Or>
					<Condition name = "WindowActive" activewindow="*"/>
					<Condition name = "SolutionOpen"/>
				</Or>
				<MenuItem id = "WordCount"
				          label = "${res:XML.MainMenu.EditMenu.WordCount}"
				          class = "ICSharpCode.SharpDevelop.Commands.WordCount"/>
			</ComplexCondition>
		</MenuItem>
		<MenuItem id = "View" label = "${res:XML.MainMenu.ViewMenu}" type="Menu">
			<MenuItem id    = "MainViewMenuBuilder"
			          type  = "Builder"
			          class = "ICSharpCode.SharpDevelop.Commands.MainViewMenuBuilder" />
			
			<MenuItem id = "Tools" label = "${res:XML.MainMenu.ViewMenu.ToolsMenu}" type="Menu">
				<MenuItem id    = "ToolsViewMenuBuilder"
				          type  = "Builder"
				          class = "ICSharpCode.SharpDevelop.Commands.ToolsViewMenuBuilder" />
			</MenuItem>
			
			<MenuItem id = "ViewItemsSeparator" type = "Separator" />
			<MenuItem id = "FullScreen"
			          label         = "${res:XML.MainMenu.ViewMenu.FullScreen}"
			          packIconKey        = "PackIconMaterial;Fullscreen"
			          class       = "ICSharpCode.SharpDevelop.Commands.ToggleFullscreenCommand" />
		</MenuItem> <!-- end VIEW menu -->
		<Condition name="RefactoringProviderSupports" supports="*">
			<MenuItem id = "Refactor" label = "${res:XML.MainMenu.RefactorMenu}" type="Menu">
				<MenuItem id    = "Rename"
				          label = "${res:SharpDevelop.Refactoring.RenameCommand}"
				          class = "ICSharpCode.SharpDevelop.Refactoring.RenameCommand"
				          shortcut = "Control|R" />
				<Condition name="RefactoringProviderSupports" supports="FindUnusedUsingDeclarations">
					<MenuItem id    = "RemoveUnusedUsings"
					          label = "${res:SharpDevelop.Refactoring.RemoveUnusedImports}"
					          class = "ICSharpCode.SharpDevelop.Refactoring.RemoveUnusedUsingsCommand" />
				</Condition>
			</MenuItem>
		</Condition> <!-- end REFACTOR menu -->
		<Condition name = "ProjectActive" activeproject="*">
			<MenuItem id = "Project" label = "${res:XML.MainMenu.ProjectMenu}" type="Menu">
				<MenuItem id = "ProjectAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu" >
					<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
				</MenuItem>
				<MenuItem id    = "AddReference"
				          label = "${res:ProjectComponent.ContextMenu.AddReference}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
				<MenuItem id    = "AddServiceReference"
				          label = "${res:ProjectComponent.ContextMenu.AddServiceReference}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddServiceReferenceToProject"/>
				<MenuItem id    = "AddWebReference"
				          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
				<MenuItem id = "AddSeparator" type = "Separator"/>
				<Include id = "ProjectActions" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions"/>
				<MenuItem id = "Separator2" type = "Separator" />
				<MenuItem id = "Options"
				          label = "${res:XML.MainMenu.ProjectMenu.Options}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.ViewProjectOptions"/>
			</MenuItem>
		</Condition> <!-- end PROJECT menu -->
		<MenuItem id = "Build" label = "${res:XML.MainMenu.BuildMenu}" type="Menu">
			<Condition name = "SolutionOpen" action="Disable">
				<MenuItem id       = "Build"
				          label    = "${res:XML.MainMenu.BuildMenu.BuildSolution}"
				          shortcut = "F8"
				          icon     = "Icons.16x16.BuildCombine"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
				<MenuItem id       = "Rebuild"
				          label    = "${res:XML.MainMenu.BuildMenu.RebuildSolution}"
				          shortcut = "Alt|F8"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.Rebuild"/>
				<MenuItem id    = "Clean"
				          label = "${res:XML.MainMenu.BuildMenu.CleanSolution}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.Clean"/>
				<Condition name = "ProjectActive" activeproject="*">
					<MenuItem id = "Separator1" type = "Separator" />
					<MenuItem id       = "Build project"
					          label    = "${res:XML.MainMenu.BuildMenu.BuildProject}"
					          shortcut = "F9"
					          icon     = "Icons.16x16.BuildCurrentSelectedProject"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
					<MenuItem id       = "Rebuild project"
					          label    = "${res:XML.MainMenu.BuildMenu.RebuildProject}"
					          shortcut = "Alt|F9"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.RebuildProject"/>
					<MenuItem id    = "Clean project"
					          label = "${res:XML.MainMenu.BuildMenu.CleanProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.CleanProject"/>
					<!--<MenuItem id    = "Publish project"
					          label = "${res:XML.MainMenu.BuildMenu.PublishProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.PublishProject"/>-->
				</Condition>
				<MenuItem id = "Separator2" type = "Separator" />
				<MenuItem id="AbortBuild"
				          label="${res:XML.MainMenu.BuildMenu.AbortBuild}"
				          shortcut="Pause"
				          class="ICSharpCode.SharpDevelop.Project.Commands.AbortBuild"
				          loadclasslazy="false"/>
				<MenuItem id = "Separator3" type = "Separator" />
				<MenuItem id = "SetConfiguration"
				          label = "${res:XML.MainMenu.BuildMenu.SetConfiguration}"
				          type = "Menu">
					<MenuItem id = "ConfigurationBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Project.Commands.SetConfigurationMenuBuilder"/>
				</MenuItem>
				<MenuItem id = "SetPlatform"
				          label = "${res:XML.MainMenu.BuildMenu.SetPlatform}"
				          type = "Menu">
					<MenuItem id = "PlatformBuilder" type = "Builder" class = "ICSharpCode.SharpDevelop.Project.Commands.SetPlatformMenuBuilder"/>
				</MenuItem>
				<MenuItem id = "EditConfigurations"
				          label = "${res:XML.MainMenu.BuildMenu.EditConfigurationsPlatforms}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.EditConfigurationsCommand"/>
			</Condition>
		</MenuItem> <!-- end BUILD menu -->
		<MenuItem id = "Debug" label = "${res:XML.MainMenu.DebugMenu}" type="Menu">
			<Condition name="DebuggerSupports" debuggersupports = "Start">
				<Condition name = "SolutionOpen" action="Disable">
					<Condition name="IsProcessRunning" isdebugging="False" action="Disable">
						<MenuItem id       = "Run"
						          label    = "${res:XML.MainMenu.RunMenu.Run}"
						          icon     = "Icons.16x16.RunProgramIcon"
						          shortcut = "F5"
						          class    = "ICSharpCode.SharpDevelop.Project.Commands.ContinueDebuggingCommand"/>
					</Condition>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "StartWithoutDebugging">
				<Condition name = "SolutionOpen" action="Disable">
					<Condition name="IsProcessRunning" isdebugging="False" action="Disable">
						<MenuItem id       = "RunWithoutDebugger"
						          label    = "${res:XML.MainMenu.DebugMenu.RunWithoutDebug}"
						          icon     = "Icons.16x16.Debug.StartWithoutDebugging"
						          shortcut = "Control|F5"
						          class    = "ICSharpCode.SharpDevelop.Project.Commands.ExecuteWithoutDebugger"/>
					</Condition>
				</Condition>
			</Condition>
			
			<Condition name = "SolutionOpen" action="Disable">
				<Condition name="IsProcessRunning" isdebugging="False" action="Disable">
					<MenuItem id       = "RunWithoutBuild"
					          label    = "${res:XML.MainMenu.DebugMenu.RunLastBuild}"
					          shortcut = "Control|Shift|F5"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.ExecuteLastBuild"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "Stop">
				<Condition name="IsProcessRunning" isdebugging="True" action="Disable">
					<MenuItem id    = "Stop"
					          label = "${res:XML.MainMenu.DebugMenu.Stop}"
					          icon  = "Icons.16x16.StopProcess"
					          shortcut = "Shift|F5"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.StopDebuggingCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports="Attaching">
				<Condition name="IsProcessRunning" isprocessrunning="False" isdebugging="False" action="Disable">
					<MenuItem id    = "Attach"
					          label = "${res:XML.MainMenu.DebugMenu.Attach}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.AttachToProcessCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports="Detaching">
				<Condition name="IsProcessRunning" isdebugging="True" action="Disable">
					<MenuItem id    = "Detach"
					          label = "${res:XML.MainMenu.DebugMenu.Detach}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.DetachFromProcessCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl">
				<MenuItem id = "ExecutionControlSeparator" type = "Separator" />
				<Condition name="IsProcessRunning" isprocessrunning = "True" isdebugging = "True" action = "Disable">
					<MenuItem id       = "Break"
					          label    = "${res:XML.MainMenu.DebugMenu.Break}"
					          icon     = "Icons.16x16.Debug.Break"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.BreakDebuggingCommand"/>
				</Condition>
				<Condition name="IsProcessRunning" isprocessrunning = "False" isdebugging = "True" action = "Disable">
					<MenuItem id       = "Continue"
					          label    = "${res:XML.MainMenu.DebugMenu.Continue}"
					          icon     = "Icons.16x16.Debug.Continue"
					          shortcut = "F5"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.ContinueDebuggingCommand"/>
				</Condition>
			</Condition>
			
			<Condition name="DebuggerSupports" debuggersupports = "Stepping">
				<ComplexCondition action="Disable">
					<Or>
						<Condition name = "IsProcessRunning" isdebugging="True" isprocessrunning="False" />
						<And>
							<Condition name="DebuggerSupports" debuggersupports = "Start" />
							<Condition name = "SolutionOpen" />
						</And>
					</Or>
					<MenuItem id = "BeforeSteppingSeparator" type = "Separator" />
					<MenuItem id       = "Step over"
					          label    = "${res:XML.MainMenu.DebugMenu.StepOver}"
					          icon     = "Icons.16x16.Debug.StepOver"
					          shortcut = "F10"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepDebuggingCommand"/>
					<MenuItem id       = "Step into"
					          label    = "${res:XML.MainMenu.DebugMenu.StepInto}"
					          icon     = "Icons.16x16.Debug.StepInto"
					          shortcut = "F11"
					          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepIntoDebuggingCommand"/>
					<Condition name="IsProcessRunning" isdebugging = "True" isprocessrunning="False" action="Disable">
						<MenuItem id       = "Step out"
						          label    = "${res:XML.MainMenu.DebugMenu.StepOut}"
						          icon     = "Icons.16x16.Debug.StepOut"
						          shortcut = "Shift|F11"
						          class    = "ICSharpCode.SharpDevelop.Project.Commands.StepOutDebuggingCommand"/>
					</Condition>
				</ComplexCondition>
			</Condition>
			
			<MenuItem id = "ToggleBreakpointSeparator" type = "Separator" />
			<ComplexCondition action="Disable">
				<And>
					<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.Editor.ITextEditor"/>
					<Condition name = "ActiveViewContentUntitled" activewindowuntitled="False"/>
				</And>
				<MenuItem id       = "Toggle Breakpoint"
				          label    = "${res:XML.MainMenu.DebugMenu.ToggleBreakpoint}"
				          shortcut = "F7"
				          icon     = "Bookmarks.Breakpoint"
				          class    = "ICSharpCode.SharpDevelop.Project.Commands.ToggleBreakpointCommand"/>
			</ComplexCondition>
		</MenuItem> <!-- end DEBUG menu -->
		
		<MenuItem id = "Search" label = "${res:XML.MainMenu.SearchMenu}" type="Menu">
			<MenuItem id = "SearchSeparator" type = "Separator" />
			<Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.Editor.ITextEditor" action="Disable">
				<MenuItem id = "ToggleBookmark"
				          label = "${res:XML.MainMenu.SearchMenu.ToggleBookmark}"
				          shortcut = "Control|M"
				          icon = "Bookmarks.ToggleMark"
				          class = "ICSharpCode.SharpDevelop.Editor.Bookmarks.ToggleBookmark"/>
				<MenuItem id = "PrevBookmark"
				          label = "${res:XML.MainMenu.SearchMenu.PrevBookmark}"
				          shortcut = "Control|OemComma"
				          icon = "Bookmarks.GotoPrevInFile"
				          class = "ICSharpCode.SharpDevelop.Editor.Bookmarks.PrevBookmark"/>
				<MenuItem id = "NextBookmark"
				          label = "${res:XML.MainMenu.SearchMenu.NextBookmark}"
				          shortcut = "Control|OemPeriod"
				          icon = "Bookmarks.GotoNextInFile"
				          class = "ICSharpCode.SharpDevelop.Editor.Bookmarks.NextBookmark"/>
				<MenuItem id = "ClearBookmarks"
				          label = "${res:XML.MainMenu.SearchMenu.ClrBookmark}"
				          icon = "Bookmarks.ClearAll"
				          class = "ICSharpCode.SharpDevelop.Editor.Bookmarks.ClearBookmarks"/>
			</Condition>
			<MenuItem id = "Separator2" type = "Separator" />
			
			<MenuItem id = "GotoLineNr"
			          label = "${res:XML.MainMenu.SearchMenu.Goto}"
			          shortcut = "Control|G"
			          class = "ICSharpCode.SharpDevelop.Editor.Commands.GotoLineNumber"/>
			
			<MenuItem id = "GotoDefinition"
			          label = "${res:ICSharpCode.NAntAddIn.GotoDefinitionMenuLabel}"
			          shortcut = "Control|Return"
			          icon="Icons.16x16.SelectionArrow"
			          class = "ICSharpCode.SharpDevelop.Editor.Commands.GoToDefinition"/>
			
			<MenuItem id = "FindReferences"
			          label = "${res:SharpDevelop.Refactoring.FindReferences}"
			          shortcut = "F12"
			          icon="Icons.16x16.SelectionArrow"
			          class = "ICSharpCode.SharpDevelop.Editor.Commands.FindReferencesCommand"/>
			
			<MenuItem id = "Rename"
			          label = "${res:SharpDevelop.Refactoring.RenameCommand}"
			          shortcut="Ctrl+R"
			          class = "ICSharpCode.SharpDevelop.Editor.Commands.RenameSymbolCommand"/>
			
			<MenuItem id = "GotoBrace"
			          label = "${res:XML.MainMenu.SearchMenu.GotoBrace}"
			          shortcut = "Control|B"
			          class = "ICSharpCode.SharpDevelop.Editor.Commands.GoToMatchingBrace"/>
			<!--			</Condition> -->
		</MenuItem>
		
		<MenuItem id="Analysis" label="${res:XML.MainMenu.Analysis}" type="Menu">
			<MenuItem id="Separator1" type="Separator" />
		</MenuItem>
		
		<MenuItem id = "Tools" label = "${res:XML.MainMenu.ToolMenu}" type="Menu">
			<MenuItem id = "ToolBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.Commands.ToolMenuBuilder" />
			<MenuItem id = "Separator1" type = "Separator" />
			<Include id = "ToolList" path = "/SharpDevelop/Workbench/Tools" />
			<MenuItem id = "Separator2" type = "Separator" />
			
			<Condition name = "SolutionOpen" action="Disable">
				<MenuItem id = "Upgrade"
				          label = "${res:ICSharpCode.SharpDevelop.Project.UpgradeView.Title}"
				          class = "ICSharpCode.SharpDevelop.Project.Converter.ShowUpgradeView"/>
			</Condition>
			
			<MenuItem id = "LastSeparator" type = "Separator" />
			
			<MenuItem id = "Options"
			          label = "${res:XML.MainMenu.ToolMenu.Options}"
			          icon = "Icons.16x16.Options"
			          class = "ICSharpCode.SharpDevelop.Commands.OptionsCommand"/>
		</MenuItem> <!-- end TOOLS menu -->
		
		<MenuItem id = "Window" label = "${res:XML.MainMenu.WindowMenu}" type="Menu">
			<Condition name = "WindowActive" activewindow="*"  action="Disable">
				<MenuItem id  = "NextWindow"
				          label = "${res:XML.MainMenu.WindowMenu.NxtWindow}"
				          icon = "Icons.16x16.NextWindowIcon"
				          shortcut = "Control|Tab"
				          class = "ICSharpCode.SharpDevelop.Commands.SelectNextWindow" />
				<MenuItem id = "PrevWindow"
				          label = "${res:XML.MainMenu.WindowMenu.PrvWindow}"
				          icon = "Icons.16x16.PrevWindowIcon"
				          shortcut = "Shift|Control|Tab"
				          class = "ICSharpCode.SharpDevelop.Commands.SelectPrevWindow" />
				<MenuItem id ="NxtPrvSeparator" type = "Separator" />
				<MenuItem id    = "CloseAll"
				          label = "${res:XML.MainMenu.FileMenu.CloseAll}"
				          icon  = "Icons.16x16.CloseAllDocuments"
				          class = "ICSharpCode.SharpDevelop.Commands.CloseAllWindows" />
			</Condition>
			<MenuItem id = "ContentBuilder"  type="Builder" class="ICSharpCode.SharpDevelop.Commands.OpenContentsMenuBuilder"/>
		</MenuItem>	 <!-- end WINDOW menu -->
		
		<MenuItem id = "Help" label = "${res:XML.MainMenu.HelpMenu}" type="Menu">
			<MenuItem id = "ContextHelp"
			          label = "${res:XML.MainMenu.HelpMenu.ContextHelp}"
			          icon = "Icons.16x16.HelpIcon"
			          shortcut = "F1"
			          command = "Help"/>
			<MenuItem id = "Help"
			          label = "${res:XML.MainMenu.HelpMenu.Topics}"
			          shortcut = "Alt|F1"
			          link = "https://github.com/icsharpcode/SharpDevelop/wiki/"/>
			<MenuItem id = "Separator1" type = "Separator" />
			<MenuItem id    = "ViewReadme"
			          label = "${res:XML.MainMenu.HelpMenu.ReadMe}"
			          link  = "home://doc/ReadMe.rtf" />
			<MenuItem id = "Web" label = "${res:XML.MainMenu.HelpMenu.WebMenu}" type="Menu">
				<MenuItem id = "SharpDevelop" label = "SharpDevelop" type="Menu">
					<MenuItem id = "Downloads" label = "Downloads" icon = "Icons.16x16.WebSearchIcon" link = "http://www.icsharpcode.net/OpenSource/SD/Download/" />
					<MenuItem id = "Forum" label = "Community Forums" icon = "Icons.16x16.WebSearchIcon" link = "http://community.sharpdevelop.net/forums/" />
					<MenuItem id = "Announcement" label = "Announcements" icon = "Icons.16x16.WebSearchIcon" link = "http://community.sharpdevelop.net/forums/3.aspx" />
					<MenuItem id = "Mail" label = "Send Us a Mail" icon = "Icons.16x16.WebSearchIcon" link = "http://www.sharpdevelop.net/OpenSource/SD/ContactUs.asp" />
					<MenuItem id = "Twitter" label = "On Twitter" icon = "Icons.16x16.WebSearchIcon" link = "https://twitter.com/sharpdevelop" />
				</MenuItem>
				<MenuItem id = "C#" label = "C#" type="Menu">
					<MenuItem id = "C# Help" label = "C# Help" icon = "Icons.16x16.WebSearchIcon" link = "http://www.csharphelp.com" />
					<MenuItem id = "CodeProject" label = "CodeProject" icon = "Icons.16x16.WebSearchIcon" link = "http://www.codeproject.com" />
					<MenuItem id = "C# Corner" label = "C# Corner" icon = "Icons.16x16.WebSearchIcon" link = "http://www.c-sharpcorner.com" />
				</MenuItem>
				<MenuItem id = "IntegratedProjects" label = "Integrated Projects" type="Menu">
					<MenuItem id = "AvalonDock" label = "AvalonDock" icon = "Icons.16x16.WebSearchIcon" link = "http://www.codeplex.com/AvalonDock/" />
					<MenuItem id = "NUnit" label = "NUnit" icon = "PadIcons.NUnitTest" link = "http://www.nunit.org/" />
					<MenuItem id = "WiX" label = "WiX" icon = "Icons.16x16.WebSearchIcon" link = "http://sourceforge.net/projects/wix/" />
					<MenuItem id = "SHFB" label = "Sandcastle Help File Builder" icon = "Icons.16x16.WebSearchIcon" link = "http://www.codeplex.com/SHFB" />
				</MenuItem>
				<MenuItem id = "NETPlatforms" label = ".NET Platforms" type="Menu">
					<MenuItem id = "MSNET"  label = "MS .NET" icon = "Icons.16x16.WebSearchIcon" link = "http://msdn.microsoft.com/net" />
					<MenuItem id = "Mono"   label = "Mono Project" icon = "Icons.16x16.WebSearchIcon" link = "http://www.mono-project.com/" />
				</MenuItem>
			</MenuItem>
			<MenuItem id = "Separator2" type = "Separator" />
			<MenuItem id = "About"
			          label = "${res:XML.MainMenu.HelpMenu.About}"
			          icon = "Icons.16x16.AboutIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.AboutSharpDevelop" />
		</MenuItem> <!-- end HELP menu -->
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/OpenFileTab/ContextMenu">
		<MenuItem id = "Close"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.Close}"
		          icon  = "Icons.16x16.CloseFileIcon"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseFileTab"/>
		<MenuItem id    = "CloseAll"
		          icon  = "Icons.16x16.CloseAllDocuments"
		          label = "${res:XML.MainMenu.FileMenu.CloseAll}"
		          class = "ICSharpCode.SharpDevelop.Commands.CloseAllWindows" />
		<MenuItem id    = "CloseAllButThis"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.CloseAllButThis}"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseAllButThisFileTab" />
		
		<MenuItem id = "CloseSeparator" type = "Separator" />
		<ComplexCondition action="Disable">
			<And>
				<Condition name = "Ownerstate" ownerstate="FileDirty"/>
				<Not>
					<Condition name = "Ownerstate" ownerstate="FileUntitled"/>
				</Not>
			</And>
			
			<MenuItem id = "Save"
			          label = "${res:OpenFileTabEventHandler.ContextMenu.Save}"
			          icon  = "Icons.16x16.SaveIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.SaveFileTab"/>
		</ComplexCondition>
		<MenuItem id = "SaveAs"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.SaveAs}"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.SaveFileAsTab"/>
		<MenuItem id = "SaveSeparator" type = "Separator" />
		<ComplexCondition action="Disable">
			<Not>
				<Condition name = "Ownerstate" ownerstate="FileUntitled,ViewContentWithoutFile" />
			</Not>
			<MenuItem id = "CopyPathName"
			          label = "${res:OpenFileTabEventHandler.CopyPathName}"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CopyPathName"/>
			<MenuItem id = "NavigateToFileInProjectBrowser"
			          label = "${res:ICSharpCode.SharpDevelop.Commands.TabStrip.NavigateToFileInProjectBrowser}"
			          shortcut = "Alt|Shift|L"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.NavigateToFileInProjectBrowser"/>
			<MenuItem id = "OpenFolderContainingFileFromTab"
			          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.OpenFolderContainingFile"/>
			<MenuItem id = "OpenCommandPromptHereFromTab"
			          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
			          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.OpenCommandPromptHere"/>
		</ComplexCondition>
	</Path>
	<!-- End Workbench standard Menu -->
	<!-- create empty /SharpDevelop/Workbench/Tools path - it's included by the main menu -->
	<Path name = "/SharpDevelop/Workbench/Tools"/>
	
	<!-- TEXT EDITOR -->
	
	<Path name = "/SharpDevelop/EntityContextMenu">
		<Include id="GotoDefinition" item="/SharpDevelop/Workbench/MainMenu/Search/GotoDefinition" />
		<Condition name="SymbolTypeAtCaret" type="member,type" action="Exclude">
			<MenuItem id="OpenInClassBrowser"
			          icon="ILSpy"
			          type="Item"
			          label="${res:MainWindow.Windows.ClassBrowser.OpenInClassBrowser}"
			          class="ICSharpCode.SharpDevelop.Dom.ClassBrowser.OpenInClassBrowserCommand"/>
		</Condition>
		<MenuItem id="Separator1" type="Separator" />
		
		<Include id="Rename" item="/SharpDevelop/Workbench/MainMenu/Search/Rename" />
		<MenuItem id = "FindReferences"
		          label = "${res:SharpDevelop.Refactoring.FindReferencesCommand}"
		          class = "ICSharpCode.SharpDevelop.Editor.Commands.FindReferencesCommand"/>
		
		<MenuItem id="DeclaringTypeContextMenu" type="Builder" class="ICSharpCode.SharpDevelop.Editor.Commands.DeclaringTypeSubMenuBuilder" />
	</Path>
	
	<!-- Start Workbench Standard Toolbar -->
	<Path name = "/SharpDevelop/Workbench/ToolBar/Standard" showInTray="True" isLocked="False">
		<ToolbarItem id      = "New"
		             packIconKey    = "PackIconMaterial;File"
		             tooltip = "${res:XML.MainMenu.FileMenu.New.File.Description}"
		             class   = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"/>
		<ToolbarItem id      = "Open"
		             packIconKey    = "PackIconMaterial;OpenInApp"
		             tooltip = "${res:Gui.ProjectBrowser.Open}"
		             class   = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>
		<ToolbarItem id      = "OpenProject"
		             tooltip = "${res:XML.MainMenu.FileMenu.Open.Project.Description}"
		             packIconKey    = "PackIconMaterial;OpenInNew"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.LoadSolution"/>
		<ToolbarItem id = "Separator1" type = "Separator"/>
		<Condition name = "ActiveWindowState" windowstate="Dirty,Untitled" nowindowstate="ViewOnly" action="Disable">
			<ToolbarItem id      = "Save"
			             icon    = "Icons.16x16.SaveIcon"
			             tooltip = "${res:XML.MainMenu.FileMenu.Save.Description}"
			             class   = "ICSharpCode.SharpDevelop.Commands.SaveFile"/>
		</Condition>
		
		<Condition name = "OpenWindowState" openwindowstate="Dirty" action="Disable">
			<ToolbarItem id = "SaveAll"
			             icon = "Icons.16x16.SaveAllIcon"
			             tooltip = "${res:XML.MainMenu.FileMenu.SaveAll.Description}"
			             class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"/>
		</Condition>
		
		<ToolbarItem id = "Separator01" type = "Separator"/>
		
		<ToolbarItem id = "Cut"
		             packIconKey = "PackIconMaterial;ContentCut"
		             tooltip = "${res:XML.MainMenu.EditMenu.Cut.Description}"
		             command = "Cut"/>
		<ToolbarItem id = "Copy"
		             packIconKey = "PackIconMaterial;ContentCopy"
		             tooltip = "${res:XML.MainMenu.EditMenu.Copy.Description}"
		             command = "Copy"/>
		<ToolbarItem id = "Paste"
		             packIconKey = "PackIconMaterial;ContentPaste"
		             tooltip = "${res:XML.MainMenu.EditMenu.Paste.Description}"
		             command = "Paste"/>
		<ToolbarItem id = "Delete"
		             icon = "Icons.16x16.DeleteIcon"
		             tooltip = "${res:XML.MainMenu.EditMenu.Delete.Description}"
		             command = "Delete"/>
		<ToolbarItem id = "UndoRedoSeparator"  type = "Separator"/>
		<ToolbarItem id      = "Undo"
		             packIconKey    = "PackIconMaterial;UndoVariant"
		             tooltip = "${res:XML.MainMenu.EditMenu.Undo.Description}"
		             command = "Undo"/>
		<ToolbarItem id      = "Redo"
		             packIconKey    = "PackIconMaterial;RedoVariant"
		             tooltip = "${res:XML.MainMenu.EditMenu.Redo.Description}"
		             command = "Redo"/>
		<ToolbarItem id = "CompileSeparator" type = "Separator"/>
		
		<ToolbarItem id      = "Compile"
		             icon    = "Icons.16x16.BuildCombine"
		             tooltip = "${res:XML.MainMenu.RunMenu.BuildSolution.Description}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
		
		<ToolbarItem id      = "BuildProject"
		             icon    = "Icons.16x16.BuildCurrentSelectedProject"
		             tooltip = "${res:XML.MainMenu.RunMenu.BuildProject.Description}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
		<ComplexCondition>
			<Or>
				<Condition name="IsProcessRunning" isdebugging = "False"/>
				<Not>
					<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl"/>
				</Not>
			</Or>
			<Condition name="IsProcessRunning" isdebugging = "False" action = "Disable">
				<Condition name = "SolutionOpen" action = "Disable">
					<Condition name="DebuggerSupports" debuggersupports = "Start">
						<ToolbarItem id      = "Run"
						             icon    = "Icons.16x16.RunProgramIcon"
						             tooltip = "${res:XML.MainMenu.RunMenu.Run.Description}"
						             class   = "ICSharpCode.SharpDevelop.Project.Commands.Execute"/>
					</Condition>
					
					<Condition name="DebuggerSupports" debuggersupports = "StartWithoutDebugging">
						<ToolbarItem id      = "RunWithoutDebugger"
						             icon    = "Icons.16x16.Debug.StartWithoutDebugging"
						             tooltip = "${res:XML.MainMenu.DebugMenu.RunWithoutDebug.Description}"
						             class   = "ICSharpCode.SharpDevelop.Project.Commands.ExecuteWithoutDebugger"/>
					</Condition>
				</Condition>
			</Condition>
		</ComplexCondition>
		
		<Condition name="IsProcessRunning" isdebugging = "True">
			<Condition name="DebuggerSupports" debuggersupports = "ExecutionControl">
				<Condition name="IsProcessRunning" isprocessrunning = "False" action = "Disable">
					<ToolbarItem id      = "Continue"
					             icon    = "Icons.16x16.Debug.Continue"
					             tooltip = "${res:XML.MainMenu.DebugMenu.Continue.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.ContinueDebuggingCommand"/>
				</Condition>
				<Condition name="IsProcessRunning" isprocessrunning = "True" action = "Disable">
					<ToolbarItem id      = "Break"
					             icon    = "Icons.16x16.Debug.Break"
					             tooltip = "${res:XML.MainMenu.DebugMenu.Break.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.BreakDebuggingCommand"/>
				</Condition>
			</Condition>
		</Condition>
		
		<Condition name="DebuggerSupports" debuggersupports = "Stop">
			<ComplexCondition action = "Disable">
				<Or>
					<Condition name="IsProcessRunning" isdebugging = "True"/>
					<Condition name="IsProcessRunning" isprocessrunning = "True"/>
				</Or>
				<ToolbarItem id = "Stop"
				             icon = "Icons.16x16.StopProcess"
				             tooltip = "${res:XML.MainMenu.DebugMenu.Stop.Description}"
				             class = "ICSharpCode.SharpDevelop.Project.Commands.StopDebuggingCommand"/>
			</ComplexCondition>
		</Condition>
		
		<Condition name="DebuggerSupports" debuggersupports = "Stepping">
			<ComplexCondition action="Disable">
				<Or>
					<Condition name = "IsProcessRunning" isdebugging="True" isprocessrunning="False" />
					<And>
						<Condition name="DebuggerSupports" debuggersupports = "Start" />
						<Condition name = "SolutionOpen" />
					</And>
				</Or>
				<ToolbarItem id = "SteppingSeparator" type = "Separator"  />
				<ToolbarItem id      = "Step over"
				             icon    = "Icons.16x16.Debug.StepOver"
				             tooltip = "${res:XML.MainMenu.DebugMenu.StepOver.Description}"
				             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepDebuggingCommand"/>
				<ToolbarItem id      = "Step into"
				             icon    = "Icons.16x16.Debug.StepInto"
				             tooltip = "${res:XML.MainMenu.DebugMenu.StepInto.Description}"
				             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepIntoDebuggingCommand"/>
				<Condition name="IsProcessRunning" isdebugging = "True" isprocessrunning="False" action="Disable">
					<ToolbarItem id      = "Step out"
					             icon    = "Icons.16x16.Debug.StepOut"
					             tooltip = "${res:XML.MainMenu.DebugMenu.StepOut.Description}"
					             class   = "ICSharpCode.SharpDevelop.Project.Commands.StepOutDebuggingCommand"/>
				</Condition>
			</ComplexCondition>
		</Condition>
		
		<ToolbarItem id = "ChooseConfigurationSeparator" type = "Separator"/>
		
		<ToolbarItem id    = "ChooseLayout"
		             type  = "Custom"
		             class = "ICSharpCode.SharpDevelop.Workbench.ChooseLayoutComboBox" />
		
		<ToolbarItem id="NavigationSeparator" type="Separator"/>
		<Condition name="CanNavigateBack" action="Disable">
			<ToolbarItem id="NavigateBack"
			             type="SplitButton"
			             icon="Icons.16x16.NavigateBack"
			             tooltip="${res:XML.MainMenu.Navigation.Back}"
			             disabledIcon="Icons.16x16.NavigateBack"
			             loadclasslazy="false"
			             class="ICSharpCode.SharpDevelop.Commands.NavigateBack">
				<MenuItem id="NavigationHistoryBuilder"
				          type="Builder"
				          class="ICSharpCode.SharpDevelop.Commands.NavigationHistoryMenuBuilder"/>
			</ToolbarItem>
		</Condition>
		<Condition name="CanNavigateForward" action="Disable">
			<ToolbarItem id="NavigateForward"
			             icon="Icons.16x16.NavigateForward"
			             tooltip="${res:XML.MainMenu.Navigation.Forward}"
			             loadclasslazy="false"
			             class="ICSharpCode.SharpDevelop.Commands.NavigateForward"/>
		</Condition>
	
	</Path>
	<!-- End Workbench Standard Toolbar -->
	
	

	<!-- Project browser Paths -->
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ToolBar/Standard">
		<Condition name = "SolutionOpen" action="Disable">
			<ToolbarItem id      = "Properties"
			             packIconKey    = "PackIconMaterial;ViewList"
			             tooltip = "${res:MainWindow.Windows.PropertiesScoutLabel}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
			<ToolbarItem id = "PropertySeparator" type = "Separator"/>
			<ToolbarItem id      = "ShowAll"
			             type    = "CheckBox"
			             packIconKey    = "PackIconMaterial;FileHidden"
			             tooltip = "${res:Gui.ProjectBrowser.ShowAllFiles}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.ToggleShowAll"/>
			<ToolbarItem id      = "Refresh"
			             packIconKey    = "PackIconMaterial;Refresh"
			             tooltip = "${res:Global.Refresh}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.RefreshProjectBrowser"/>
			<ToolbarItem id = "PropertySeparator" type = "Separator"/>
			<ToolbarItem id      = "Collapse"
			             packIconKey    = "PackIconMaterial;MinusBox"
			             tooltip = "${res:MainWindow.Windows.SearchResultPanel.CollapseAll.ToolTip}"
			             class   = "ICSharpCode.SharpDevelop.Project.Commands.CollapseAllProjectBrowser"/>
		</Condition>
	</Path>
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ToolBar/File">
		<ToolbarItem id      = "OpenFile"
		             icon    = "Icons.16x16.OpenFileIcon"
		             tooltip = "${res:Gui.ProjectBrowser.Open}"
		             class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode">
		<MenuItem id = "Build"
		          label = "${res:XML.MainMenu.BuildMenu.BuildSolution}"
		          shortcut = "F8"
		          icon  = "Icons.16x16.BuildCombine"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Build"/>
		<MenuItem id = "Rebuild"
		          label = "${res:XML.MainMenu.BuildMenu.RebuildSolution}"
		          shortcut = "Alt|F8"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Rebuild"/>
		<MenuItem id = "Clean"
		          label = "${res:XML.MainMenu.BuildMenu.CleanSolution}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.Clean"/>
		<MenuItem id = "CombineBuildGroupSeparator" type = "Separator"/>
		
		<Condition name="WriteableSolution" action="Disable">
			<MenuItem id = "CombineAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu">
				<MenuItem id    = "AddNewProjectToSolution"
				          label = "${res:ProjectComponent.ContextMenu.NewProject}"
				          icon  = "Icons.16x16.NewProjectIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewProjectToSolution"/>
				<MenuItem id    = "AddExitingProjectToSolution"
				          label = "${res:ProjectComponent.ContextMenu.ExistingProject}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingProjectToSolution"/>
				<MenuItem id    = "Separator1" type = "Separator" />
				<MenuItem id    = "AddItem"
				          label = "${res:ProjectComponent.ContextMenu.AddItem}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemToSolution"/>
				<MenuItem id    = "AddNewSolutionFolderToSolution"
				          icon  = "ProjectBrowser.SolutionFolder.CreateNew"
				          label = "${res:ProjectComponent.ContextMenu.NewSolutionFolder}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewSolutionFolderToSolution"/>
			</MenuItem>
		</Condition>
		
		<MenuItem id = "AddSeparator" type = "Separator"/>
		<MenuItem id = "OpenFolderContainingFile"
		          label = "${res:Gui.ProjectBrowser.OpenFolderInExplorer}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolderContainingFile"/>
		<MenuItem id = "OpenCommandPromptHere"
		          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenCommandPromptHere"/>
		<MenuItem id = "OpenSeparator" type = "Separator"/>
		<MenuItem id    = "CollapseAll"
		          label = "${res:ProjectComponent.ContextMenu.CollapseAll}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CollapseAll"/>
		<MenuItem id    = "Paste"
		          label = "${res:XML.MainMenu.EditMenu.Paste}"
		          icon  = "Icons.16x16.PasteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
		<MenuItem id       = "Rename"
		          label    = "${res:ProjectComponent.ContextMenu.Rename}"
		          shortcut = "F2"
		          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		<MenuItem id = "Separator3" type = "Separator"/>
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionFolderNode">
		<Include id = "CombineAddMenu" item="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode/CombineAddMenu"/>
		
		<Include id = "CollapseAll" item="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode/CollapseAll"/>
		
		<MenuItem id = "AddSeparator" type = "Separator"/>
		<Include id="CutPasteRemoveRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionItemNode">
		<MenuItem id = "OpenFile"
		          label = "${res:ProjectComponent.ContextMenu.Open}"
		          icon  = "Icons.16x16.OpenFileIcon"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
		<MenuItem id      = "OpenFileWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		<MenuItem id = "OpenFolderContainingFile"
		          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolderContainingFile"/>
		<MenuItem id = "OpenCommandPromptHere"
		          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenCommandPromptHere"/>
		<MenuItem id = "OpenSeparator" type = "Separator" />
		<Include id="CutCopyRemoveRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyRemoveRename"/>
	</Path>
	
	<Path path = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectNode">
		<MenuItem id = "Build project"
		          label = "${res:ProjectComponent.ContextMenu.Build}"
		          icon  = "Icons.16x16.BuildCurrentSelectedProject"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.BuildProject"/>
		<MenuItem id = "Rebuild project"
		          label = "${res:ProjectComponent.ContextMenu.Rebuild}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.RebuildProject"/>
		<MenuItem id = "Clean project"
		          label = "${res:ProjectComponent.ContextMenu.Clean}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CleanProject"/>
		<!--<MenuItem id = "Publish project"
		          label = "${res:XML.MainMenu.BuildMenu.PublishProject}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.PublishProject"/>-->
		<MenuItem id = "CombineBuildGroupSeparator" type = "Separator"/>
		
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "ProjectAddMenu" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type = "Menu" >
				<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
			</MenuItem>
			
			<MenuItem id    = "AddReference"
			          label = "${res:ProjectComponent.ContextMenu.AddReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
			<MenuItem id    = "AddServiceReference"
			          label = "${res:ProjectComponent.ContextMenu.AddServiceReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddServiceReferenceToProject"/>
			<MenuItem id    = "AddWebReference"
			          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
			<MenuItem id = "AddSeparator" type = "Separator"/>
		</Condition>
		
		<Include id = "CollapseAll" item="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode/CollapseAll"/>
		
		<MenuItem id    = "OpenProjectWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		
		<Include id = "ProjectActions" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions"/>
		<MenuItem id = "Separator2" type = "Separator"/>
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
		<MenuItem id = "CutCopyPasteSeparator" type = "Separator"/>
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/MissingProjectNode">
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/UnknownProjectNode">
		<MenuItem id    = "OpenProjectWith"
		          label = "${res:Gui.ProjectBrowser.OpenWith}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
		<MenuItem id = "OpenSeparator" type = "Separator" />
		
		<Include id="inc" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions">
		<MenuItem id = "OpenFolder"
		          label = "${res:Gui.ProjectBrowser.OpenFolderInExplorer}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenProjectFolder"/>
		<MenuItem id = "OpenProjectOutputFolder"
		          label = "${res:ProjectComponent.ContextMenu.OpenProjectOutputFolder}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenProjectOutputFolder"/>
		<MenuItem id = "OpenCommandPromptHere"
		          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenCommandPromptHere"/>
		<Condition name="IsProcessRunning" isprocessrunning="False" isdebugging="False" action="Disable">
			<MenuItem id          = "Run"
			          label       = "${res:ProjectComponent.ContextMenu.RunProject}"
			          icon        = "Icons.16x16.RunProgramIcon"
			          class       = "ICSharpCode.SharpDevelop.Project.Commands.RunProject"/>
		</Condition>
		<MenuItem id          = "RunWithoutDebugger"
		          label       = "${res:ProjectComponent.ContextMenu.RunProjectWithoutDebugger}"
		          icon        = "Icons.16x16.Debug.StartWithoutDebugging"
		          class       = "ICSharpCode.SharpDevelop.Project.Commands.RunProjectWithoutDebugger"/>
		<MenuItem id    = "SetAsStartupProject"
		          label = "${res:ProjectComponent.ContextMenu.SetAsStartupProject}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.SetAsStartupProject"/>
		<MenuItem id = "GenerateDocumentation"
		          label = "${res:ProjectComponent.ContextMenu.GenerateDocumentation}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.GenerateProjectDocumentation"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ReferenceFolderNode">
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id    = "AddReference"
			          label = "${res:ProjectComponent.ContextMenu.AddReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddReferenceToProject"/>
			<MenuItem id    = "AddServiceReference"
			          label = "${res:ProjectComponent.ContextMenu.AddServiceReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddServiceReferenceToProject"/>
			<MenuItem id    = "AddWebReference"
			          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FileNode">
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "OpenFile"
			          label = "${res:ProjectComponent.ContextMenu.Open}"
			          icon  = "Icons.16x16.OpenFileIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowser"/>
			<MenuItem id      = "OpenFileWith"
			          label = "${res:Gui.ProjectBrowser.OpenWith}"
			          class   = "ICSharpCode.SharpDevelop.Project.Commands.OpenFileFromProjectBrowserWith"/>
			<MenuItem id = "OpenFolderContainingFile"
			          label = "${res:OpenFileTabEventHandler.FileContainingFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolderContainingFile"/>
			<MenuItem id = "OpenCommandPromptHere"
			          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenCommandPromptHere"/>
		</ComplexCondition>
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "Remove"
			          label = "${res:Global.RemoveButtonText}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<Condition name="WriteableProject" action="Disable">
				<MenuItem id = "OpenSeparator" type = "Separator" />
				
				<Condition name = "Ownerstate" ownerstate = "InProject">
					<MenuItem id = "Add" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type="Menu">
						<Include path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode/Add"/>
						<MenuItem id    = "AddDependentSeparator"
						          type  = "Separator" />
						<MenuItem id    = "NewDependentItem"
						          label = "${res:ProjectComponent.ContextMenu.NewDependentItem}"
						          icon  = "ProjectBrowser.CodeBehind"
						          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewDependentItemsToProject"/>
						<MenuItem id    = "ExistingItemAsDependent"
						          label = "${res:ProjectComponent.ContextMenu.ExistingItemAsDependent}"
						          icon  = "ProjectBrowser.CodeBehind"
						          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemsToProjectAsDependent"/>
					</MenuItem>
					<MenuItem id = "AddSeparator" type = "Separator"  />
				</Condition>
			</Condition>
			
			<ComplexCondition>
				<Or>
					<Condition name = "Ownerstate" ownerstate = "InProject"/>
					<Condition name = "Ownerstate" ownerstate = "None"/>
					<Condition name = "Ownerstate" ownerstate = "BehindFile"/>
				</Or>
				<ComplexCondition>
					<Or>
						<Condition name = "Ownerstate" ownerstate = "InProject"/>
						<Condition name = "Ownerstate" ownerstate = "BehindFile"/>
					</Or>
					<Condition name="WriteableProject" action="Disable">
						<MenuItem id    = "ExcludeFile"
						          label = "${res:ProjectComponent.ContextMenu.ExcludeFileFromProject}"
						          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
					</Condition>
					<MenuItem id     = "ExecuteCustomTool"
					          label  = "${res:ProjectComponent.ContextMenu.ExecuteCustomTool}"
					          class  = "ICSharpCode.SharpDevelop.Project.ExecuteCustomToolCommand"/>
				</ComplexCondition>
				
				<Condition name = "Ownerstate" ownerstate = "None">
					<MenuItem id    = "IncludeFile"
					          label = "${res:ProjectComponent.ContextMenu.IncludeFileInProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.IncludeFileInProject"/>
				</Condition>
				<MenuItem id = "ExcludeSeparator" type = "Separator" />
			</ComplexCondition>
			
			<ComplexCondition>
				<And>
					<Condition name = "Ownerstate" ownerstate = "InProject"/>
					<Not>
						<Condition name = "Ownerstate" ownerstate = "BehindFile"/>
					</Not>
					<Condition name="IsProcessRunning" isprocessrunning="False" isdebugging="False"/>
					<Condition name = "ViewInBrowser" extensions="html,htm"/>
				</And>
				
				<MenuItem id          = "ViewInBrowser"
				          label       = "${res:ProjectComponent.ContextMenu.ViewInBrowser}"
				          icon        = "Icons.22x22.Browser"
				          class       = "ICSharpCode.SharpDevelop.Project.Commands.ViewInBrowser"/>
				<MenuItem id = "ExcludeSeparator_ViewInBrowser" type = "Separator" />
			</ComplexCondition>
			
			<Include id="CutCopyPasteDeleteRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename"/>
			<MenuItem id = "RenameSeparator" type = "Separator" />
			<MenuItem id    = "Properties"
			          icon  = "Icons.16x16.PropertiesIcon"
			          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyRemoveRename">
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "Cut"
			          label = "${res:XML.MainMenu.EditMenu.Cut}"
			          type = "Item"
			          icon = "Icons.16x16.CutIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
		</Condition>
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CopyProjectBrowserNode"/>
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "Remove"
			          label = "${res:Global.RemoveButtonText}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutPasteRemoveRename">
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "Cut"
			          label = "${res:XML.MainMenu.EditMenu.Cut}"
			          type = "Item"
			          icon = "Icons.16x16.CutIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
			<MenuItem id    = "Paste"
			          label = "${res:XML.MainMenu.EditMenu.Paste}"
			          type = "Item"
			          icon  = "Icons.16x16.PasteIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
		</Condition>
		<MenuItem id = "Remove"
		          label = "${res:Global.RemoveButtonText}"
		          type = "Item"
		          icon  = "Icons.16x16.DeleteIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename">
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id = "Cut"
			          label = "${res:XML.MainMenu.EditMenu.Cut}"
			          type = "Item"
			          icon = "Icons.16x16.CutIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.CutProjectBrowserNode"/>
		</Condition>
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          loadclasslazy = "false"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.CopyProjectBrowserNode"/>
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id    = "Paste"
			          label = "${res:XML.MainMenu.EditMenu.Paste}"
			          type = "Item"
			          icon  = "Icons.16x16.PasteIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.PasteProjectBrowserNode"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/FolderNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "CreateMissing"
			          label = "${res:ProjectComponent.ContextMenu.NewFolder}"
			          type  = "Item"
			          icon  = "Icons.16x16.NewFolderIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.CreateMissingCommand"/>
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "Add" label = "${res:ProjectComponent.ContextMenu.AddMenu}" type="Menu">
				<MenuItem id    = "New Item"
				          label = "${res:ProjectComponent.ContextMenu.NewItem}"
				          icon  = "Icons.16x16.NewDocumentIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewItemsToProject"/>
				<MenuItem id    = "Existing Item"
				          label = "${res:ProjectComponent.ContextMenu.ExistingItem}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingItemsToProject"/>
				<MenuItem id    = "NewFolder"
				          label = "${res:ProjectComponent.ContextMenu.NewFolder}"
				          icon  = "Icons.16x16.NewFolderIcon"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddNewFolderToProject"/>
				<MenuItem id    = "ExistingFolder"
				          label = "${res:ProjectComponent.ContextMenu.ExistingFolder}"
				          class = "ICSharpCode.SharpDevelop.Project.Commands.AddExistingFolderToProject"/>
			</MenuItem>
			<MenuItem id = "AddSeparator" type = "Separator"  />
			<Include id = "CollapseAll" item="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/SolutionNode/CollapseAll"/>
			<MenuItem id = "OpenFolder"
			          label = "${res:Gui.ProjectBrowser.OpenFolderInExplorer}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenFolder"/>
			<MenuItem id = "OpenCommandPromptHere"
			          label = "${res:OpenFileTabEventHandler.OpenCommandPromptHere}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.OpenCommandPromptHere"/>
			<ComplexCondition>
				<Or>
					<Condition name = "Ownerstate" ownerstate = "InProject"/>
					<Condition name = "Ownerstate" ownerstate = "None"/>
				</Or>
				<Condition name = "Ownerstate" ownerstate = "InProject">
					<MenuItem id    = "ExcludeFile"
					          label = "${res:ProjectComponent.ContextMenu.ExcludeFileFromProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
				</Condition>
				
				<Condition name = "Ownerstate" ownerstate = "None">
					<MenuItem id    = "IncludeFile"
					          label = "${res:ProjectComponent.ContextMenu.IncludeFileInProject}"
					          class = "ICSharpCode.SharpDevelop.Project.Commands.IncludeFileInProject"/>
				</Condition>
				
				<MenuItem id = "ExcludeSeparator" type = "Separator" />
			</ComplexCondition>
			
			<Include id="CutCopyPasteDeleteRename" path="/SharpDevelop/Pads/ProjectBrowser/ContextMenu/CutCopyPasteDeleteRename"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/WebReferencesFolderNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id    = "AddWebReference"
			          label = "${res:ProjectComponent.ContextMenu.AddWebReference}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.AddWebReferenceToProject"/>
			<MenuItem id = "AddSeparator" type = "Separator"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/WebReferenceNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "Refresh"
			          label = "${res:ProjectComponent.ContextMenu.RefreshWebReference}"
			          type = "Item"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.RefreshWebReference"/>
			<MenuItem id = "RefreshSeparator" type = "Separator" />
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
			<MenuItem id = "PropertiesSeparator" type = "Separator" />
			<MenuItem id = "Properties"
			          icon  = "Icons.16x16.PropertiesIcon"
			          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ServiceReferencesFolderNode">
		<MenuItem id    = "AddServiceReference"
		          label = "${res:ProjectComponent.ContextMenu.AddServiceReference}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.AddServiceReferenceToProject"/>
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id    = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id       = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ServiceReferenceNode">
		<Condition name = "Ownerstate" ownerstate = "Missing">
			<MenuItem id = "RemoveMissing"
			          label = "${res:Global.RemoveButtonText}"
			          type  = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ExcludeFileFromProject"/>
		</Condition>
		<ComplexCondition>
			<Not>
				<Condition name = "Ownerstate" ownerstate = "Missing"/>
			</Not>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          type = "Item"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
			<MenuItem id = "Rename"
			          label    = "${res:ProjectComponent.ContextMenu.Rename}"
			          shortcut = "F2"
			          class    = "ICSharpCode.SharpDevelop.Project.Commands.RenameEntryEvent"/>
			<MenuItem id = "PropertiesSeparator" type = "Separator" />
			<MenuItem id = "Properties"
			          icon  = "Icons.16x16.PropertiesIcon"
			          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
		</ComplexCondition>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ReferenceNode">
		<MenuItem id    = "RefreshReference"
		          icon  = "Icons.16x16.BrowserRefresh"
		          label = "${res:Global.Refresh}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.RefreshReference"/>
		<Condition name="WriteableProject" action="Disable">
			<MenuItem id    = "Remove"
			          label = "${res:Global.RemoveButtonText}"
			          icon  = "Icons.16x16.DeleteIcon"
			          class = "ICSharpCode.SharpDevelop.Project.Commands.DeleteProjectBrowserNode"/>
		</Condition>
		<MenuItem id = "RemoveSeparator" type = "Separator" />
		<MenuItem id    = "Properties"
		          icon  = "Icons.16x16.PropertiesIcon"
		          label = "${res:XML.MainMenu.FormatMenu.ShowProperties}"
		          class = "ICSharpCode.SharpDevelop.Project.Commands.ShowPropertiesForNode"/>
	</Path>
	
	<!-- END Project Browser Paths-->
	
	<!-- ClassBrowser -->
	<Path name = "/SharpDevelop/Pads/ClassBrowser/Toolbar">
		<ToolbarItem id      = "OpenAssembly"
		             type    = "DropDownButton"
		             packIconKey    = "PackIconMaterial;OpenInApp"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.OpenAssemblyButton.ToolTip}">
			<MenuItem id    = "OpenAssemblyFromFile"
			          packIconKey    = "PackIconMaterial;BookOpenPageVariant"
			          label = "${res:MainWindow.Windows.ClassBrowser.OpenAssemblyFromFile}"
			          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.OpenAssemblyFromFileCommand"/>
			<MenuItem id    = "OpenAssemblyFromGAC"
			          packIconKey    = "PackIconMaterial;FolderUpload"
			          label = "${res:MainWindow.Windows.ClassBrowser.OpenAssemblyFromGAC}"
			          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.OpenAssemblyFromGACCommand"/>
		</ToolbarItem>
	</Path>
	<Path name = "/SharpDevelop/Pads/ClassBrowser/Searchbar">
		<ToolbarItem id      = "Search"
		             type    = "Custom"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.SearchButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserSearchTerm"/>
		
		<ToolbarItem id      = "CommitSearch"
		             icon    = "Icons.16x16.FindIcon"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.CommitSearch.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserCommitSearch"/>
		
		<ToolbarItem id      = "CancelSearch"
		             icon    = "OutputPad.Toolbar.ClearOutputWindow"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.ClearSearch.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClassBrowser.ClassBrowserCancelSearch"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/AssemblyContextMenu">
		<Condition name="IsProcessRunning" isdebugging = "False" action = "Exclude">
			<Condition name="DebuggerSupports" debuggersupports = "Start">
				<MenuItem id = "RunAssemblyWithDebugger"
				          label = "${res:XML.MainMenu.RunMenu.Run}"
				          icon = "Icons.16x16.RunProgramIcon"
				          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.RunAssemblyWithDebuggerCommand"/>
				<MenuItem id = "AssemblyContextMenuSeparator" type = "Separator"/>
			</Condition>
		</Condition>
		<Condition name="IsAssemblyUnpinned" action="Exclude">
			<MenuItem id = "PermanentlyAddToWorkspace"
			          label = "${res:MainWindow.Windows.ClassBrowser.AddToWorkspace}"
			          icon = "Icons.16x16.AssemblyFromFile"
			          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.PermanentlyAddModuleToWorkspaceCommand"/>
		</Condition>
		<MenuItem id = "RemoveAssembly"
		          label = "${res:Global.RemoveButtonText}"
		          icon = "Icons.16x16.DeleteIcon"
		          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.RemoveAssemblyCommand"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/AssemblyReferencesContextMenu">
		<MenuItem id    = "AddReference"
		          label = "${res:ProjectComponent.ContextMenu.AddReference}"
		          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.AddProjectReferenceCommand"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ClassBrowser/AssemblyReferenceContextMenu">
		<MenuItem id = "PermanentlyAddToWorkspace"
		          label = "${res:MainWindow.Windows.ClassBrowser.AddToWorkspace}"
		          icon = "Icons.16x16.AssemblyFromFile"
		          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.PermanentlyAddModuleToWorkspaceCommand"/>
		<MenuItem id    = "Remove"
		          label = "${res:Global.RemoveButtonText}"
		          icon  = "Icons.16x16.DeleteIcon"
		          class = "ICSharpCode.SharpDevelop.Dom.ClassBrowser.RemoveProjectReferenceCommand"/>
	</Path>
	
	<!-- END Class Browser Paths-->
	
	<!-- Compiler message view / output pad paths -->
	<Path name = "/SharpDevelop/Pads/CompilerMessageView/Toolbar">
		<ToolbarItem id      = "CategorySelect"
		             type    = "Custom"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ShowOutputFromComboBox.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ShowOutputFromComboBox"/>
		
		<ToolbarItem id    = "CategorySelectSeparator" type  = "Separator"/>
		
		<ToolbarItem id      = "Clear"
		             icon    = "OutputPad.Toolbar.ClearOutputWindow"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ClearAllButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ClearOutputWindow"/>
		
		<ToolbarItem id      = "ToggleWordWrap"
		             type    = "CheckBox"
		             icon    = "OutputPad.Toolbar.ToggleWordWrap"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ToggleWordWrapButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ToggleMessageViewWordWrap"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/CompilerMessageView/ContextMenu">
		<Include id = "Copy" item = "/SharpDevelop/Workbench/MainMenu/Edit/Copy"/>
		<Include id = "SelectAll" item = "/SharpDevelop/Workbench/MainMenu/Edit/SelectAll"/>
		<MenuItem id    = "Clear"
		          icon  = "OutputPad.Toolbar.ClearOutputWindow"
		          label = "${res:MainWindow.Windows.CompilerMessageView.ClearAllButton.ToolTip}"
		          class = "ICSharpCode.SharpDevelop.Gui.ClearOutputWindow"/>
	</Path>
	<!-- END CompilerMessageView Paths-->
	
	<!-- ErrorList pad paths -->
	<Path name = "/SharpDevelop/Pads/ErrorList/Toolbar">
		<ToolbarItem id      = "Errors"
		             type    = "CheckBox"
		             icon    = "Icons.16x16.Error"
		             label   = "${res:MainWindow.Windows.ErrorList.ErrorButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.ErrorButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ShowErrorsToggleButton"/>
		
		<ToolbarItem id    = "ErrorsSeparator" type  = "Separator"/>
		
		<ToolbarItem id    = "Warnings"
		             type  = "CheckBox"
		             icon  = "Icons.16x16.Warning"
		             label = "${res:MainWindow.Windows.ErrorList.WarningButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.WarningButton.ToolTip}"
		             class = "ICSharpCode.SharpDevelop.Gui.ShowWarningsToggleButton"/>
		<ToolbarItem id    = "WarningsSeparator" type  = "Separator"/>
		
		<ToolbarItem id    = "Messages"
		             type  = "CheckBox"
		             icon  = "Icons.16x16.Information"
		             label = "${res:MainWindow.Windows.ErrorList.MessageButton.Label}"
		             tooltip = "${res:MainWindow.Windows.ErrorList.MessageButton.ToolTip}"
		             class = "ICSharpCode.SharpDevelop.Gui.ShowMessagesToggleButton"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/ErrorList/TaskContextMenu">
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          command = "Copy"/>
	</Path>
	<!-- END ErrorList Paths-->
	
	<!-- TaskList pad paths -->
	<Path name="/SharpDevelop/Pads/TaskList/Toolbar">
		<ToolbarItem id = "SelectScope"
		             class = "ICSharpCode.SharpDevelop.Gui.SelectScopeComboBox"
		             type = "Custom"/>
	</Path>
	
	<Path name="/SharpDevelop/Pads/TaskList/TaskContextMenu">
		<MenuItem id = "Copy"
		          label = "${res:XML.MainMenu.EditMenu.Copy}"
		          type = "Item"
		          icon = "Icons.16x16.CopyIcon"
		          command = "Copy"/>
	</Path>

	<Path name="/SharpDevelop/Pads/CommonConsole/ToolBar">
		<ToolbarItem id = "ClearConsole"
		             tooltip = "${res:AddIns.Debugger.Console.ClearConsole}"
		             class = "ICSharpCode.SharpDevelop.Gui.ClearConsoleCommand"
		             icon = "OutputPad.Toolbar.ClearOutputWindow" />
		<ToolbarItem id = "DeleteHistory"
		             tooltip = "${res:AddIns.Debugger.Console.DeleteHistory}"
		             class = "ICSharpCode.SharpDevelop.Gui.DeleteHistoryCommand"
		             icon = "Icons.16x16.DeleteHistory" />
		<ToolbarItem type="Separator" />
		<ToolbarItem id      = "ToggleWordWrap"
		             type    = "CheckBox"
		             icon    = "OutputPad.Toolbar.ToggleWordWrap"
		             tooltip = "${res:MainWindow.Windows.CompilerMessageView.ToggleWordWrapButton.ToolTip}"
		             class   = "ICSharpCode.SharpDevelop.Gui.ToggleConsoleWordWrapCommand"/>
	</Path>
	<!-- END TaskList Paths-->

	<!-- Property pad paths -->
	<Path name = "/SharpDevelop/Views/PropertyPad/ContextMenu">
		<MenuItem id    = "ResetProperty"
		          label = "${res:ICSharpCode.SharpDevelop.Gui.Pads.PropertyPad.ContextMenu.Reset}"
		          class = "ICSharpCode.SharpDevelop.Gui.PropertyPadResetCommand"/>
		<MenuItem id = "Separator"  type = "Separator" />
		<MenuItem id    = "ShowDescription"
		          label = "${res:ICSharpCode.SharpDevelop.Gui.Pads.PropertyPad.ContextMenu.ShowDescription}"
		          class = "ICSharpCode.SharpDevelop.Gui.PropertyPadShowDescriptionCommand"/>
	</Path>
	<!-- End Property pad paths -->
	
	<Path name = "/SharpDevelop/Dialogs/OptionsDialog">
		<OptionPanel id    = "UIOptions"
		             label = "${res:Dialog.Options.TreeViewOptions.SharpDevelopOptionsText}">
			<OptionPanel id    = "SelectCulture"
			             label = "${res:Dialog.Options.IDEOptions.SelectCulture.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.SelectCulturePanel"/>
			<OptionPanel id    = "SelectStyle"
			             label = "${res:Dialog.Options.IDEOptions.SelectVisualStyle.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.SelectStylePanel"/>
			<OptionPanel id    = "LoadSave"
			             label = "${res:Dialog.Options.IDEOptions.LoadSaveOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.OptionPanels.LoadSaveOptions"/>
			
			<OptionPanel id    = "TaskListOptions"
			             label = "${res:Dialog.Options.IDEOptions.TaskListOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.TaskListOptionsPanel"/>
			
			
			<OptionPanel id    = "OutputWindowOptions"
			             label = "${res:Dialog.Options.IDEOptions.OutputPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.OutputWindowOptionsPanel"/>
			
			<OptionPanel id    = "ProjectAndSolutionOptions"
			             label = "${res:Dialog.Options.IDEOptions.ProjectAndSolutionOptions.PanelName}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ProjectAndSolutionOptions"/>
		
		</OptionPanel>
		
		<OptionPanel id    = "CodingOptions"
		             label = "${res:Dialog.Options.IDEOptions.CodingOptionsText}">
			
			<OptionPanel id    = "CodeGeneration"
			             label = "${res:Dialog.Options.IDEOptions.CodeGenerationOptionsPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.CodeGenerationPanel"/>
			
			<OptionPanel id    = "EditStandardHeaderPanel"
			             label = "${res:Dialog.Options.IDEOptions.EditStandardHeaderPanel.Title}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.EditStandardHeaderPanel"/>
		</OptionPanel>
		
		<OptionPanel id    = "ToolsOptions"
		             label = "${res:Dialog.Options.IDEOptions.ToolsOptionsText}">
			
			<OptionPanel id    = "ExternalTools"
			             label = "${res:Dialog.Options.ExternalToolsText}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ExternalToolPanel"/>
			
			<OptionPanel id    = "ServiceReferences"
			             label = "${res:Dialog.Options.ServicesReferencesText}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ServiceReference.ServiceReferenceOptionsPanel"/>
		</OptionPanel>
	</Path>

	<!-- Sidebar pad paths -->
	<Path name = "/SharpDevelop/Workbench/SharpDevelopSideBar/ContextMenu">
		<Condition name = "Ownerstate" ownerstate = "TabCanBeDeleted" action="Disable">
			<MenuItem id     = "DeleteTab"
			          label = "${res:SideBarComponent.ContextMenu.DeleteTab}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarDeleteTabHeader"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanBeRenamed" action="Disable">
			<MenuItem id    = "RenameTab"
			          label = "${res:SideBarComponent.ContextMenu.RenameTab}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarRenameTabHeader"/>
		</Condition>
		
		<MenuItem id = "Separator1" type = "Separator" />
		<MenuItem id    = "AddTab"
		          label = "${res:SideBarComponent.ContextMenu.AddTab}"
		          class = "ICSharpCode.SharpDevelop.Commands.SideBarAddTabHeader"/>
		
		<MenuItem id = "Separator2" type = "Separator" />
		<Condition name = "Ownerstate" ownerstate="CanMoveUp" action="Disable">
			<MenuItem id    = "MoveTabUp"
			          label = "${res:Global.MoveUp}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveTabUp"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanMoveDown" action="Disable">
			<MenuItem id    = "MoveTabDown"
			          label = "${res:Global.MoveDown}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveTabDown"/>
		</Condition>
		
		<Include id="CommonContextMenu" path="/SharpDevelop/Workbench/SharpDevelopSideBar/CommonContextMenu"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/SharpDevelopSideBar/SideTab/ContextMenu">
		<Condition name = "Ownerstate" ownerstate="TabCanBeDeleted" action="Disable">
			<MenuItem id = "DeleteTabItem"
			          label = "${res:SideBarComponent.ContextMenu.DeleteTabItem}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarDeleteTabItem"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanBeRenamed" action="Disable">
			<MenuItem id = "RenameTabItem"
			          label = "${res:SideBarComponent.ContextMenu.RenameTabItem}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarRenameTabItem" />
		</Condition>
		
		<MenuItem id = "Separator1" type = "Separator" />
		<Condition name = "Ownerstate" ownerstate="CanMoveItemUp" action="Disable">
			<MenuItem id = "MoveItemUp"
			          label = "${res:Global.MoveUp}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveActiveItemUp"/>
		</Condition>
		
		<Condition name = "Ownerstate" ownerstate="CanMoveItemDown" action="Disable">
			<MenuItem id = "MoveItemDown"
			          label = "${res:Global.MoveDown}"
			          class = "ICSharpCode.SharpDevelop.Commands.SideBarMoveActiveItemDown"/>
		</Condition>
		
		<Include id="CommonContextMenu" path="/SharpDevelop/Workbench/SharpDevelopSideBar/CommonContextMenu"/>
	</Path>
	<!-- end sidebar paths -->

	<Path name = "/SharpDevelop/BackendBindings/Templates">
		<TemplateFile path="../data/templates" />
	</Path>
	
	<Path name = "/SharpDevelop/BackendBindings/TemplateCommands">
		<Class id="CheckPortableLibraryInstalled"
		       class="ICSharpCode.SharpDevelop.Project.PortableLibrary.CheckPortableLibraryInstalled"/>
	</Path>

	<Path name="/SharpDevelop/Workbench/ProjectBindings">
	</Path>
	
	<Path name="/SharpDevelop/Workbench/ProjectBindings/Temp">
	</Path>
	
	<Path name = "/SharpDevelop/TargetFrameworks">
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net20" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net30" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net35" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net35Client" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net40" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net40Client" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net45" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net451" />
		<Static class="ICSharpCode.SharpDevelop.Project.TargetFramework" member="Net452" />
	</Path>

</AddIn>